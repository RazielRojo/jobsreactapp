import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchDays, fetchDaysData } from "./daysAPI";
export const getDaysAsync = createAsyncThunk("days/fetchDays", async () => {
  const response = fetchDaysData();
  // The value we return becomes the `fulfilled` action payload
  return response;
});
const initialState = {
  DayStatisticsDataTable: [],
  status: "idle",
};
//export const selectDayStatisticsData = (state) => state.DayStatisticsData;
export const daysSlice = createSlice({
  name: "days",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getDays: (state) => {
      state.value = fetchDays;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder.addCase(getDaysAsync, (state, action) => {
    //   state.DayStatisticsData = action.payload;
    //   console.log(state.DayStatisticsData);
    // });
    builder
      .addCase(getDaysAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getDaysAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.DayStatisticsDataTable = action.payload;
        console.log(state.DayStatisticsDataTable);
      });
  },
});

export const selectDayStatisticsData = (state) =>
  state.days.DayStatisticsDataTable;
export const { getDays } = daysSlice.actions;
export default daysSlice.reducer;
